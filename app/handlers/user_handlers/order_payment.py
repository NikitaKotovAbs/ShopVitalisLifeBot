import logging
import os
from decimal import Decimal
from typing import Optional, Dict
from aiogram import F, Router, types, Bot
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (
    LabeledPrice,
    PreCheckoutQuery,
    SuccessfulPayment,
    Message,
    ReplyKeyboardRemove
)
from app.keyboard.callback_data import ProductAction
from app.utils.db.operations.add_data import OrderManager
from app.utils.db.operations.fetch_data import ProductFetcher
from app.utils.view_data import product_manager

router = Router()
logger = logging.getLogger(__name__)


class OrderStates(StatesGroup):
    waiting_for_address = State()
    waiting_for_payment_confirmation = State()


async def calculate_basket_total(user_id: int) -> Optional[int]:
    """–í—ã—á–∏—Å–ª—è–µ—Ç —Å—É–º–º—É –∫–æ—Ä–∑–∏–Ω—ã –≤ –∫–æ–ø–µ–π–∫–∞—Ö"""
    try:
        basket = product_manager.get_products(user_id)
        if not basket:
            return None

        items = ProductFetcher.get_juices_by_ids(list(basket.keys()))
        if not items:
            return None

        total = Decimal('0')
        for product_id, quantity in basket.items():
            if product_id in items:
                _, _, price, _ = items[product_id]
                total += Decimal(str(price)) * quantity

        return int(total * 100)  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –∫–æ–ø–µ–π–∫–∏
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Å—É–º–º—ã –∫–æ—Ä–∑–∏–Ω—ã: {e}")
        return None


@router.callback_query(ProductAction.filter(F.action == "checkout"))
async def start_checkout_process(
        callback: types.CallbackQuery,
        bot: Bot,
        state: FSMContext
):
    try:
        user_id = callback.from_user.id
        total_kopecks = await calculate_basket_total(user_id)

        if total_kopecks is None or total_kopecks <= 0:
            await callback.answer("‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø—É—Å—Ç–æ–π –∑–∞–∫–∞–∑")
            return

        await state.update_data({
            'user_id': user_id,
            'total_kopecks': total_kopecks,
            'message_to_delete': callback.message.message_id
        })

        await callback.message.answer(
            "üì¶ –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:",
            reply_markup=ReplyKeyboardRemove()
        )
        await state.set_state(OrderStates.waiting_for_address)
        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start_checkout_process: {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏")
        await state.clear()


@router.message(OrderStates.waiting_for_address)
async def save_address(
        message: Message,
        bot: Bot,
        state: FSMContext
):
    try:
        if not message.text:
            await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–¥—Ä–µ—Å —Ç–µ–∫—Å—Ç–æ–º")
            return

        address = message.text.strip()
        if len(address) < 10:
            await message.answer("‚ùå –ê–¥—Ä–µ—Å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π (–º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤)")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥—Ä–µ—Å –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
        await state.update_data(address=address)

        data = await state.get_data()
        if 'message_to_delete' in data:
            try:
                await bot.delete_message(
                    chat_id=message.from_user.id,
                    message_id=data['message_to_delete']
                )
            except Exception:
                logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ—Ä–∑–∏–Ω–æ–π")

        await message.answer("‚úÖ –ê–¥—Ä–µ—Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ–ø–ª–∞—Ç—É:")
        await send_payment_invoice(message, bot, state)
        await state.set_state(OrderStates.waiting_for_payment_confirmation)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞: {e}", exc_info=True)
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–¥—Ä–µ—Å–∞")
        await state.clear()


async def send_payment_invoice(
        message: Message,
        bot: Bot,
        state: FSMContext
):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –∏–Ω–≤–æ–π—Å–∞"""
    if not os.getenv('YOOKASSA_PROVIDER_TOKEN'):
        await message.answer("‚ö†Ô∏è –ü–ª–∞—Ç–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        logger.error("YOOKASSA_PROVIDER_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return

    try:
        data = await state.get_data()
        total_kopecks = data.get('total_kopecks')
        user_id = data.get('user_id')
        address = data.get('address')

        if not all([total_kopecks, user_id, address]):
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
            await state.clear()
            return

        print(f"–°—É–º–º–∞ –≤ –∫–æ–ø–µ–π–∫–∞—Ö: {total_kopecks}")
        print(f"–¢–∏–ø —Å—É–º–º—ã: {type(total_kopecks)}")

        if total_kopecks < 100:  # –ú–∏–Ω–∏–º—É–º 1 —Ä—É–±–ª—å (100 –∫–æ–ø–µ–µ–∫)
            raise ValueError("–°—É–º–º–∞ —Å–ª–∏—à–∫–æ–º –º–∞–ª–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã")

        provider_token = os.getenv('YOOKASSA_PROVIDER_TOKEN')
        print(f"–¢–æ–∫–µ–Ω –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞: {provider_token}")  # –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ —Ç–æ–∫–µ–Ω –Ω–µ None

        await bot.send_invoice(
            chat_id=user_id,
            title="–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞",
            description=f"–ê–¥—Ä–µ—Å: {address[:100]}",
            payload=f"{user_id}_{hash(address)}",
            provider_token=os.getenv('YOOKASSA_PROVIDER_TOKEN'),
            currency="RUB",
            prices=[LabeledPrice(label="–¢–æ–≤–∞—Ä—ã", amount=total_kopecks)],
            need_phone_number=True,
            provider_data = None
        )

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        print(f"–î–µ—Ç–∞–ª–∏: —Å—É–º–º–∞={total_kopecks}, —Ç–∏–ø={type(total_kopecks)}")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–Ω–≤–æ–π—Å–∞: {e}", exc_info=True)
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞")
        await state.clear()


@router.pre_checkout_query()
async def pre_checkout_handler(pre_checkout_query: PreCheckoutQuery, bot: Bot):
    try:
        await bot.answer_pre_checkout_query(
            pre_checkout_query_id=pre_checkout_query.id,
            ok=True
        )
    except Exception as e:
        logger.error(f"Pre-checkout error: {e}")
        await bot.answer_pre_checkout_query(
            pre_checkout_query_id=pre_checkout_query.id,
            ok=False,
            error_message="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞"
        )


@router.message(F.successful_payment)
async def successful_payment_handler(message: Message, state: FSMContext):
    try:
        data = await state.get_data()
        user_id = data.get('user_id')
        address = data.get('address')

        if not address:
            raise ValueError("–ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è")

        # –î–æ–±–∞–≤–ª—è–µ–º await –ø–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞
        order_id = await OrderManager.create_order(
            user_id=user_id,
            products=product_manager.get_products(user_id),
            total_amount=message.successful_payment.total_amount // 100,
            address=address
        )

        product_manager.clear_products(user_id)

        await message.answer(
            f"‚úÖ –ü–ª–∞—Ç–µ–∂ –Ω–∞ —Å—É–º–º—É {message.successful_payment.total_amount // 100} ‚ÇΩ –ø–æ–ª—É—á–µ–Ω!\n"
            f"–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {order_id}\n"
            f"–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {address}"
        )
        await state.clear()

    except Exception as e:
        logger.error(f"Payment processing error: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω.")
        await state.clear()