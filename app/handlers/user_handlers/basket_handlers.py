from aiogram import Router, types
from aiogram.filters import Command
import logging
from decimal import Decimal

from app.product_manage import ProductManager
from app.keyboard.inline import basket_keyboard
from app.utils.db.operations.fetch_data import ProductFetcher

router = Router()
product_manager = ProductManager()

async def show_basket(message: types.Message, user_id: int):
    try:
        products = product_manager.get_products(user_id)
        if not products:
            await message.answer("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")
            return

        items = ProductFetcher.get_juices_by_ids(list(products.keys()))
        if not items:
            await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–∞—Ö")
            return

        total = Decimal('0')
        text = "üõí *–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞*\n\n"

        for product_id, quantity in products.items():
            if product_id not in items:
                continue

            title, _, price, _ = items[product_id]
            item_total = Decimal(str(price)) * quantity
            total += item_total
            text += f"‚ñ™Ô∏è {title}\n   {quantity} √ó {float(price):.2f}‚ÇΩ = {float(item_total):.2f}‚ÇΩ\n"

        text += f"\nüíµ *–ò—Ç–æ–≥–æ: {float(total):.2f}‚ÇΩ*"

        await message.answer(
            text=text,
            reply_markup=basket_keyboard(),
            parse_mode="Markdown"
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã: {e}")
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É")

@router.message(Command("basket"))
async def basket_command(message: types.Message):
    await show_basket(message, message.from_user.id)