from aiogram import Router, types
import logging
from app.product_manage import ProductManager
from app.keyboard.inline import navigation_keyboard
from app.keyboard.callback_data import ProductAction
from app.utils.db.operations.fetch_data import ProductFetcher
from aiogram import Bot
from .basket_handlers import show_basket
from ...utils.view_products import show_product

router = Router()
product_manager = ProductManager()

@router.callback_query(ProductAction.filter())
async def handle_product_actions(
        callback: types.CallbackQuery,
        callback_data: ProductAction,
        bot: Bot
):
    try:
        user_id = callback.from_user.id
        message = callback.message

        # –ü–µ—Ä–µ–Ω–µ—Å–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É —Ç–æ–ª—å–∫–æ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π, —Ç—Ä–µ–±—É—é—â–∏—Ö product_id
        if callback_data.action in ["add", "remove"]:  # –¢–æ–ª—å–∫–æ —ç—Ç–∏ –¥–µ–π—Å—Ç–≤–∏—è –Ω—É–∂–¥–∞—é—Ç—Å—è –≤ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–æ–≤–∞—Ä–∞
            juices = ProductFetcher.all_juices()
            if not juices:
                await callback.answer("–¢–æ–≤–∞—Ä—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
                return

            current_item = next((juice for juice in juices if juice[0] == callback_data.product_id), None)
            if not current_item:
                await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

        match callback_data.action:
            case "add":
                product_manager.add_product(user_id, callback_data.product_id)
                await callback.answer("‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É")

            case "remove":
                product_manager.remove_product(user_id, callback_data.product_id)
                await callback.answer("‚ùå –¢–æ–≤–∞—Ä —É–¥–∞–ª—ë–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã")

            case "view":
                await message.delete()
                await show_basket(message, user_id)
                return

            case "clear":
                product_manager.clear_products(user_id)
                await message.delete()
                await message.answer("üõí –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞")
                await show_product(
                    target=callback,
                    index=0,  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Ä
                    fetch_data_func=ProductFetcher.all_juices,
                    keyboard_func=navigation_keyboard,
                    bot=bot  # –ù—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
                )
                return

            case "close_basket":
                await message.delete()
                await callback.answer("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Ç–æ–≤–∞—Ä–∞–º")
                await show_product(
                    target=callback,
                    index=0,  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Ä
                    fetch_data_func=ProductFetcher.all_juices,
                    keyboard_func=navigation_keyboard,
                    bot=bot  # –ù—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
                )
                return

            # case "checkout":
            #     await process_checkout(message, user_id)
            #     await callback.answer()
            #     return

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Ç–æ–ª—å–∫–æ –¥–ª—è add/remove
        if callback_data.action in ["add", "remove"]:
            juices = juices or ProductFetcher.all_juices()
            current_qty = product_manager.get_products(user_id).get(callback_data.product_id, 0)
            current_index = next((i for i, juice in enumerate(juices) if juice[0] == callback_data.product_id), 0)

            try:
                await message.edit_reply_markup(
                    reply_markup=navigation_keyboard(
                        current_index=current_index,
                        total_items=len(juices),
                        item_id=callback_data.product_id,
                        current_qty=current_qty,
                        user_id=user_id
                    )
                )
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {e}")
                await callback.answer("–û–±–Ω–æ–≤–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–π—Å—Ç–≤–∏—è: {e}", exc_info=True)
        await callback.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")