import logging

from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.utils.keyboard import InlineKeyboardBuilder
from app.keyboard import kb_staff_menu
from app.keyboard.inline import staff_menu
from app.utils.db.operations.update_data import UserEdit

router = Router()


class AddStaffStates(StatesGroup):
    waiting_for_username = State()
    confirm_add_role = State()


ROLE_ACTIONS = {
    "set_owner": ("owner", "üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"),
    "set_staff": ("staff", "üëî –ü–µ—Ä—Å–æ–Ω–∞–ª–∞"),
    "set_user": ("user", "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
}


@router.message(AddStaffStates.waiting_for_username)
async def handle_username_input(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ username –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏"""
    await state.update_data(username=message.text.strip(), role="owner")  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–æ–ª—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    builder = InlineKeyboardBuilder()
    buttons = [
        ("üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", "set_owner"),
        ("üëî –ü–µ—Ä—Å–æ–Ω–∞–ª", "set_staff"),
        ("üö´ –ó–∞–±—Ä–∞—Ç—å –ø—Ä–∞–≤–∞", "set_user")
    ]

    for text, callback_data in buttons:
        builder.button(text=text, callback_data=callback_data)

    builder.adjust(1)  # –í—Å–µ –∫–Ω–æ–ø–∫–∏ –≤ —Å—Ç–æ–ª–±–∏–∫ –¥–ª—è –ª—É—á—à–µ–≥–æ –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è

    await message.answer(
        f"üîò <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>\n\n"
        f"üë§ {message.text}\n\n"
        f"–£–∫–∞–∂–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞:",
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )
    await state.set_state(AddStaffStates.confirm_add_role)


@router.callback_query(
    AddStaffStates.confirm_add_role,
    F.data.in_(ROLE_ACTIONS.keys())
)
async def handle_role_selection(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ä–æ–ª–∏ –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
    data = await state.get_data()
    username = data['username']
    current_user_role = data['role']
    role_data = callback.data

    role, role_name = ROLE_ACTIONS[role_data]

    try:
        UserEdit.set_user_job_title(role, username)

        await callback.message.edit_text(
            f"‚úÖ <b>–ü—Ä–∞–≤–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!</b>\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}\n"
            f"üéö –ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å: {role_name}",
            parse_mode="HTML"
        )

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        await callback.message.answer(
            "üìå <b>–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–æ–º</b>",
            reply_markup=staff_menu(role=current_user_role),
            parse_mode="HTML"
        )

    except Exception as e:
        await callback.message.edit_text(
            "‚ö†Ô∏è <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–∞–≤!</b>\n\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.",
            parse_mode="HTML"
        )
        logging.error(f"–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∞–≤: {e}")

    await state.clear()


@router.callback_query(AddStaffStates.confirm_add_role)
async def handle_unknown_role_action(callback: types.CallbackQuery):
    await callback.answer("üî¥ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ!", show_alert=True)