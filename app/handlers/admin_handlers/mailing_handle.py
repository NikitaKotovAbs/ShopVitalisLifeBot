from aiogram import Router, types, F, Bot
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

from app.keyboard.inline import staff_menu
from app.utils.db.operations.fetch_data import UserFetcher
import logging
from aiogram.utils.keyboard import InlineKeyboardBuilder

router = Router()


class MailingStates(StatesGroup):
    waiting_for_message = State()
    confirm_mailing = State()


@router.message(MailingStates.waiting_for_message)
async def process_mailing_message(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    await state.update_data(mailing_text=message.text)
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="confirm_mailing")
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_mailing")

    await message.answer(
        f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Ä–∞—Å—Å—ã–ª–∫—É:\n\n{message.text}",
        reply_markup=builder.as_markup()
    )
    await state.set_state(MailingStates.confirm_mailing)


@router.callback_query(F.data == "confirm_mailing", MailingStates.confirm_mailing)
async def confirm_mailing(
        callback: types.CallbackQuery,
        state: FSMContext,
        bot: Bot  # –î–æ–±–∞–≤–ª—è–µ–º –±–æ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    data = await state.get_data()
    mailing_text = data['mailing_text']
    role = data.get('role')
    await callback.message.edit_text("üîÑ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...")

    users = UserFetcher.get_all_users()
    success = 0
    failed = 0

    for user in users:
        try:
            await bot.send_message(
                chat_id=user['id_telegram'],
                text=mailing_text
            )
            success += 1
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
            failed += 1

    await callback.message.edit_text(
        f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n–£—Å–ø–µ—à–Ω–æ: {success}\n–ù–µ —É–¥–∞–ª–æ—Å—å: {failed}"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω—é –ø–µ—Ä—Å–æ–Ω–∞–ª–∞
    await callback.message.answer(
        "–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
        reply_markup=staff_menu(role=role)  # –ò–ª–∏ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ —Ä–µ–∞–ª—å–Ω—É—é —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    )

    await state.clear()


@router.callback_query(F.data == "cancel_mailing", MailingStates.confirm_mailing)
async def cancel_mailing(callback: types.CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    await callback.message.edit_text("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
    await state.clear()
    await callback.answer()
