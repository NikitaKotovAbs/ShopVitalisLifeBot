from aiogram.utils.keyboard import InlineKeyboardBuilder
from app.keyboard.callback_data import JuiceNavigation, ProductAction, StaffAction, OrderNavigation
from app.product_manage import ProductManager
product_manager = ProductManager()


def navigation_keyboard(
        current_index: int,
        total_items: int,
        item_id: int,
        current_qty: int,
        user_id: int,
        is_admin: bool = False
):
    builder = InlineKeyboardBuilder()

    match is_admin:
        case True:
            builder.button(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=StaffAction(action="delete", product_id=item_id))
            builder.button(text="‚úèÔ∏è –î–æ–±–∞–≤–∏—Ç—å", callback_data=StaffAction(action="add", product_id=item_id))
            builder.button(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data=StaffAction(action="back_staff_menu"))
        case False:
            # –ö–Ω–æ–ø–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã
            if current_qty > 0:
                builder.button(
                    text="‚ûñ",
                    callback_data=ProductAction(action="remove", product_id=item_id)
                )

            builder.button(
                text=f"‚ûï({current_qty})" if current_qty > 0 else "‚ûï",
                callback_data=ProductAction(action="add", product_id=item_id)
            )
            # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º product_manager –≤–º–µ—Å—Ç–æ ProductAction
            product_has_items = any(qty > 0 for qty in product_manager.get_products(user_id).values()) if user_id else False
            if product_has_items:
                builder.button(
                    text="üõí –ö–æ—Ä–∑–∏–Ω–∞",
                    callback_data=ProductAction(action="view")
                )

    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    if current_index > 0:
        builder.button(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
            callback_data=JuiceNavigation(action="prev", current_index=current_index, is_admin=is_admin)
        )

    if current_index < total_items - 1:
        builder.button(
            text="–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è",
            callback_data=JuiceNavigation(action="next", current_index=current_index, is_admin=is_admin)
        )
    # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
    nav_buttons = 2 if (current_index > 0 and current_index < total_items - 1) else 1
    builder.adjust(nav_buttons, 2 if current_qty > 0 else 1, 1)

    return builder.as_markup()


def basket_keyboard():
    builder = InlineKeyboardBuilder()
    builder.button(text="üßπ –û—á–∏—Å—Ç–∏—Ç—å", callback_data=ProductAction(action="clear"))
    builder.button(text="‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å", callback_data=ProductAction(action="checkout"))
    builder.button(text="üîô –ù–∞–∑–∞–¥",callback_data=ProductAction(action="close_basket"))
    builder.adjust(2, 1)
    return builder.as_markup()


def staff_menu(
    role: str
):
    builder = InlineKeyboardBuilder()

    if role == "owner":
        builder.button(
            text="–¢–æ–≤–∞—Ä—ã",
            callback_data=StaffAction(action="edit_products")
        )
        builder.button(
            text="–†–∞—Å—Å—ã–ª–∫–∞",
            callback_data=StaffAction(action="mailing")
        )
        builder.button(
            text="–ó–∞–∫–∞–∑—ã",
            callback_data=StaffAction(action="orders")
        )
        builder.button(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
            callback_data=StaffAction(action="back_main_menu")
        )
    return builder.as_markup()


def orders_keyboard(orders: list, current_page: int, is_admin: bool = False):
    builder = InlineKeyboardBuilder()

    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    if current_page > 0:
        builder.button(
            text="‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–π",
            callback_data=OrderNavigation(action="view_order", page=current_page - 1, is_admin=is_admin)
        )

    if current_page < len(orders) - 1:
        builder.button(
            text="–°–ª–µ–¥—É—é—â–∏–π ‚û°Ô∏è",
            callback_data=OrderNavigation(action="view_order", page=current_page + 1, is_admin=is_admin)
        )

    if is_admin:
        # –ö–Ω–æ–ø–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
        builder.button(
            text="–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å",
            callback_data=OrderNavigation(action="change_status", order_id=orders[current_page]['id'])
        )

        builder.button(
            text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é",
            callback_data=StaffAction(action="back_staff_menu")
        )

    builder.adjust(2, 1)
    return builder.as_markup()


def status_keyboard(order_id: int):
    builder = InlineKeyboardBuilder()

    statuses = {
        "processing": "–í –æ–±—Ä–∞–±–æ—Ç–∫–µ",
        "delivering": "–í –¥–æ—Å—Ç–∞–≤–∫–µ",
        "delivered": "–î–æ—Å—Ç–∞–≤–ª–µ–Ω",
        "completed": "–í—ã–ø–æ–ª–Ω–µ–Ω"
    }

    for status, text in statuses.items():
        builder.button(
            text=text,
            callback_data=OrderNavigation(
                action="set_status",
                order_id=order_id,
                status=status
            )
        )

    builder.button(
        text="–ù–∞–∑–∞–¥",
        callback_data=OrderNavigation(action="back_order")
    )

    builder.adjust(1)  # –ü–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Å—Ç—Ä–æ–∫–µ
    return builder.as_markup()

def edit_product_action():
    builder = InlineKeyboardBuilder()

    builder.button(
        text="–£–¥–∞–ª–∏—Ç—å",
        callback_data=StaffAction(action="delete_product")
    )
    return builder.as_markup()