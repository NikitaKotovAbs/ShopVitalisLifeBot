from aiogram.utils.keyboard import InlineKeyboardBuilder
from app.keyboard.callback_data import JuiceNavigation, ProductAction, StaffAction, OrderNavigation
from app.product_manage import ProductManager

product_manager = ProductManager()


def navigation_keyboard(
        current_index: int,
        total_items: int,
        item_id: int,
        current_qty: int,
        user_id: int,
        role: str = "user"
):
    builder = InlineKeyboardBuilder()

    if role in ("owner", "staff"):
        builder.button(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=StaffAction(action="delete", product_id=item_id))
        builder.button(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=StaffAction(action="add", product_id=item_id))
        builder.button(text="üîô –í –º–µ–Ω—é", callback_data=StaffAction(action="back_staff_menu"))
        builder.adjust(2, 1)  # 2 –∫–Ω–æ–ø–∫–∏ –≤ –ø–µ—Ä–≤–æ–º —Ä—è–¥—É, 1 –≤–æ –≤—Ç–æ—Ä–æ–º

    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–Ω–æ–ø–∫–∏
    if role == "user":
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
        if current_qty > 0:
            builder.button(text="‚ûñ –£–±—Ä–∞—Ç—å", callback_data=ProductAction(action="remove", product_id=item_id))

        builder.button(
            text=f"‚ûï –î–æ–±–∞–≤–∏—Ç—å ({current_qty})" if current_qty > 0 else "‚ûï –î–æ–±–∞–≤–∏—Ç—å",
            callback_data=ProductAction(action="add", product_id=item_id)
        )

        # –ö–Ω–æ–ø–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã
        if any(qty > 0 for qty in product_manager.get_products(user_id).values()):
            builder.button(text="üõí –í –∫–æ—Ä–∑–∏–Ω—É", callback_data=ProductAction(action="view"))

    # –ù–∞–≤–∏–≥–∞—Ü–∏—è –º–µ–∂–¥—É —Ç–æ–≤–∞—Ä–∞–º–∏
    if current_index > 0:
        builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
        callback_data=JuiceNavigation(action="prev", current_index=current_index, role=role))

    if current_index < total_items - 1:
        builder.button(text="–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è",
        callback_data=JuiceNavigation(action="next", current_index=current_index, role=role))

        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –∫–Ω–æ–ø–æ–∫
    builder.adjust(2 if current_qty > 0 else 1, 1,
        2 if (current_index > 0 and current_index < total_items - 1) else 1)

    return builder.as_markup()


def basket_keyboard():
    builder = InlineKeyboardBuilder()
    builder.button(text="üßπ –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data=ProductAction(action="clear"))
    builder.button(text="‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data=ProductAction(action="checkout"))
    builder.button(text="üîô –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∫—É–ø–∫–∏", callback_data=ProductAction(action="close_basket"))
    builder.adjust(1, 2)  # –û—á–∏—Å—Ç–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –≤ —Ä—è–¥
    return builder.as_markup()


def staff_menu(role: str):
    builder = InlineKeyboardBuilder()

    if role in ("owner", "staff"):
        builder.button(text="üõçÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏", callback_data=StaffAction(action="edit_products"))
        builder.button(text="üì¢ –°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data=StaffAction(action="mailing"))
        builder.button(text="üì¶ –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–∫–∞–∑–æ–≤", callback_data=StaffAction(action="orders"))

        if role == "owner":
            builder.button(text="üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–æ–º", callback_data=StaffAction(action="add_staff"))

        builder.button(text="‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data=StaffAction(action="back_main_menu"))

        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –∫–Ω–æ–ø–æ–∫
        if role == "owner":
            builder.adjust(1, 2, 1, 1)  # –î–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞
        else:
            builder.adjust(1, 2, 1)  # –î–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∞

    return builder.as_markup()


def orders_keyboard(orders: list, current_page: int, role: str = "user"):
    builder = InlineKeyboardBuilder()

    # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –∑–∞–∫–∞–∑–∞–º
    if current_page > 0:
        builder.button(text="‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–π",
                       callback_data=OrderNavigation(action="view_order", page=current_page - 1, role=role))

    if current_page < len(orders) - 1:
        builder.button(text="–°–ª–µ–¥—É—é—â–∏–π ‚û°Ô∏è",
                       callback_data=OrderNavigation(action="view_order", page=current_page + 1, role=role))

    # –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∞
    if role in ("staff", "owner"):
        builder.button(text="üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å",
                       callback_data=OrderNavigation(action="change_status", order_id=orders[current_page]['id']))
        builder.button(text="üîô –í –º–µ–Ω—é", callback_data=StaffAction(action="back_staff_menu"))

    builder.adjust(2, 2)  # –ù–∞–≤–∏–≥–∞—Ü–∏—è –∏ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ —Ä–∞–∑–Ω—ã—Ö —Ä—è–¥–∞—Ö
    return builder.as_markup()


def status_keyboard(order_id: int):
    builder = InlineKeyboardBuilder()

    statuses = [
        ("üîÑ –í –æ–±—Ä–∞–±–æ—Ç–∫–µ", "processing"),
        ("üöö –í –¥–æ—Å—Ç–∞–≤–∫–µ", "delivering"),
        ("üì¶ –î–æ—Å—Ç–∞–≤–ª–µ–Ω", "delivered"),
        ("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω", "completed")
    ]

    for text, status in statuses:
        builder.button(text=text, callback_data=OrderNavigation(action="set_status", order_id=order_id, status=status))

    builder.button(text="üîô –ù–∞–∑–∞–¥ –∫ –∑–∞–∫–∞–∑—É", callback_data=OrderNavigation(action="back_order"))

    builder.adjust(1)  # –í—Å–µ –∫–Ω–æ–ø–∫–∏ –≤ —Å—Ç–æ–ª–±–∏–∫
    return builder.as_markup()


def edit_product_action():
    builder = InlineKeyboardBuilder()
    builder.button(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data=StaffAction(action="delete_product"))
    builder.button(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data=StaffAction(action="edit_product"))
    builder.adjust(1)  # –ö–Ω–æ–ø–∫–∏ –≤ —Å—Ç–æ–ª–±–∏–∫
    return builder.as_markup()