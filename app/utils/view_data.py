import logging
from aiogram import Router, types, F
from aiogram.types import BufferedInputFile, InputMediaPhoto, Message, Chat, CallbackQuery
from aiogram import Bot
from app.keyboard import kb_order
from app.keyboard.inline import orders_keyboard
from app.product_manage import ProductManager
from app.keyboard.callback_data import ProductAction
from app.utils.notify import Notifier

product_manager = ProductManager()

async def show_product(
    target: Message | CallbackQuery | Chat,
    index: int,
    fetch_data_func: callable,
    keyboard_func: callable,
    bot: Bot = None,
    is_admin: bool = False  # –ù–æ–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è —Ä–µ–∂–∏–º–∞ –∞–¥–º–∏–Ω–∫–∏
):
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç (–æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
        if isinstance(target, CallbackQuery):
            message = target.message
            chat = message.chat
            user_id = target.from_user.id
        elif isinstance(target, Message):
            message = target
            chat = target.chat
            user_id = target.from_user.id
        else:  # Chat
            message = None
            chat = target
            user_id = None
            if bot is None:
                raise ValueError("Bot instance required when target is Chat")

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        items = fetch_data_func()
        if not items:
            if message:
                await message.answer("üçπ –¢–æ–≤–∞—Ä—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å!")
            else:
                await bot.send_message(chat.id, "üçπ –¢–æ–≤–∞—Ä—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å!")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä–∞–Ω–∏—Ü –∏–Ω–¥–µ–∫—Å–∞
        index = max(0, min(index, len(items) - 1))
        item_data = items[index]

        # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç - ID —Ç–æ–≤–∞—Ä–∞
        item_id = item_data[0]
        title, desc, price, image_blob = item_data[1:]  # –û—Å—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ

        # –§–æ—Ä–º–∏—Ä—É–µ–º caption —Å —É—á–µ—Ç–æ–º —Ä–µ–∂–∏–º–∞
        caption = (
            f"<b>üõ† –†–µ–∂–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n<b>{title}</b>\n\n{desc}\n\nüí∞ –¶–µ–Ω–∞: {price} —Ä—É–±.\n" if is_admin else "" +
            f"<b>{title}</b>\n\n{desc}\n\nüí∞ –¶–µ–Ω–∞: {price} —Ä—É–±."
        )

        # –î–ª—è –∞–¥–º–∏–Ω–∫–∏ –Ω–µ –Ω—É–∂–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –∫–æ—Ä–∑–∏–Ω–µ
        current_qty = 0 if is_admin else product_manager.get_products(user_id).get(item_id, 0)

        logging.info(f"Showing product: is_admin={is_admin}, index={index}")

        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = keyboard_func(
            current_index=index,
            total_items=len(items),
            item_id=item_id,
            current_qty=current_qty,
            user_id=user_id,
            is_admin=is_admin  # –ü–µ—Ä–µ–¥–∞–µ–º —Ñ–ª–∞–≥ –≤ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        )

        # –û—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
        if image_blob:
            if message and message.photo:
                await message.edit_media(
                    media=InputMediaPhoto(
                        media=BufferedInputFile(image_blob, filename="product.png"),
                        caption=caption,
                        parse_mode="HTML"
                    ),
                    reply_markup=keyboard
                )
            else:
                sender = message.answer_photo if message else bot.send_photo
                await sender(
                    photo=BufferedInputFile(image_blob, filename="product.png"),
                    caption=caption,
                    reply_markup=keyboard,
                    parse_mode='HTML'
                )
        else:
            if message:
                await message.edit_text(
                    text=caption,
                    reply_markup=keyboard,
                    parse_mode='HTML'
                )
            else:
                await bot.send_message(
                    chat_id=chat.id,
                    text=caption,
                    reply_markup=keyboard,
                    parse_mode='HTML'
                )

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Ç–æ–≤–∞—Ä–∞: {e}", exc_info=True)
        if message:
            await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–æ–≤–∞—Ä–∞")
        else:
            await bot.send_message(chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–æ–≤–∞—Ä–∞")


async def show_order_page(
    message: types.Message,
    orders: list,
    page: int,
    is_admin: bool = False,
    edit_existing: bool = True
) -> types.Message:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
    :param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è Telegram
    :param orders: –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤
    :param page: –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    :param is_admin: –†–µ–∂–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (True/False)
    :param edit_existing: –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (True) –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–æ–≤–æ–µ (False)
    :return: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    """
    try:
        order = orders[page]
        total_orders = len(orders)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Ç–æ–≤–∞—Ä–æ–≤
        products_text = "\n".join(
            f"‚û°Ô∏è {p['title']} x{p['quantity']} - {p['price']}‚ÇΩ"
            for p in order['products']
        )

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
        if is_admin:
            order_text = (
                f"üì¶ –ó–∞–∫–∞–∑ #{order['id']}\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {order['user']['tag_telegram']}\n"
                f"üìÖ –î–∞—Ç–∞: {order['created_at']}\n"
                f"üè† –ê–¥—Ä–µ—Å: {order['address']}\n"
                f"üîÑ –°—Ç–∞—Ç—É—Å: {Notifier.get_status_display(order['status'])}\n"
                f"üí≥ –°—É–º–º–∞: {order['total_price']}‚ÇΩ\n\n"
                f"üõí –¢–æ–≤–∞—Ä—ã:\n{products_text}"
            )
        else:
            order_text = (
                f"üì¶ –í–∞—à –∑–∞–∫–∞–∑ #{order['id']} ({page + 1}/{total_orders})\n"
                f"üìÖ –î–∞—Ç–∞: {order['created_at']}\n"
                f"üè† –ê–¥—Ä–µ—Å: {order['address']}\n"
                f"üîÑ –°—Ç–∞—Ç—É—Å: {Notifier.get_status_display(order['status'])}\n"
                f"üí≥ –°—É–º–º–∞: {order['total_price']}‚ÇΩ\n\n"
                f"üõí –°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:\n{products_text}"
            )

        # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É (–¥–æ–ª–∂–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å is_admin)
        keyboard = orders_keyboard(orders, page, is_admin)

        # –í—ã–±–∏—Ä–∞–µ–º –º–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏
        if edit_existing:
            await message.edit_text(
                text=order_text,
                reply_markup=keyboard
            )
            return message
        else:
            return await message.answer(
                text=order_text,
                reply_markup=keyboard
            )

    except IndexError:
        error_msg = "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞" if is_admin else "‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞"
        logging.error(f"IndexError: page={page}, orders_count={len(orders)}")
    except Exception as e:
        error_msg = "‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–∞" if is_admin else "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞"
        logging.error(f"Error showing order: {e}")

    return await message.answer(error_msg)